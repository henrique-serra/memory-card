// services/PokemonCache.js

/**
 * Servi√ßo de cache para Pok√©mons da Pok√©API
 * Implementa cache em mem√≥ria + localStorage conforme regra da API
 */
export class PokemonCache {
  static storage = new Map();
  static CACHE_DURATION = 3600000; // 1 hora em millisegundos
  
  /**
   * Busca um Pok√©mon no cache
   * @param {number} id - ID do Pok√©mon
   * @returns {Object|null} - Dados do Pok√©mon ou null se n√£o encontrado/expirado
   */
  static get(id) {
    // Primeiro verifica cache em mem√≥ria
    const cached = this.storage.get(id);
    if (cached && this.isValid(cached)) {
      return cached.data;
    }
    
    // Se n√£o encontrou na mem√≥ria, tenta localStorage
    const fromStorage = this.loadFromLocalStorage(id);
    if (fromStorage) {
      return fromStorage;
    }
    
    return null;
  }
  
  /**
   * Salva um Pok√©mon no cache
   * @param {number} id - ID do Pok√©mon
   * @param {Object} data - Dados do Pok√©mon
   */
  static set(id, data) {
    const cacheEntry = {
      data,
      timestamp: Date.now()
    };
    
    // Salva na mem√≥ria
    this.storage.set(id, cacheEntry);
    
    // Salva no localStorage para persist√™ncia
    try {
      localStorage.setItem(
        `pokemon_${id}`, 
        JSON.stringify(cacheEntry)
      );
    } catch (error) {
      console.warn('N√£o foi poss√≠vel salvar no localStorage:', error);
    }
  }
  
  /**
   * Verifica se um item do cache ainda √© v√°lido
   * @param {Object} cached - Item do cache com timestamp
   * @returns {boolean} - true se ainda v√°lido
   */
  static isValid(cached) {
    return (Date.now() - cached.timestamp) < this.CACHE_DURATION;
  }
  
  /**
   * Carrega um Pok√©mon do localStorage
   * @param {number} id - ID do Pok√©mon
   * @returns {Object|null} - Dados do Pok√©mon ou null
   */
  static loadFromLocalStorage(id) {
    try {
      const stored = localStorage.getItem(`pokemon_${id}`);
      if (stored) {
        const parsed = JSON.parse(stored);
        if (this.isValid(parsed)) {
          // Se v√°lido, coloca na mem√≥ria tamb√©m
          this.storage.set(id, parsed);
          return parsed.data;
        } else {
          // Se expirado, remove do localStorage
          localStorage.removeItem(`pokemon_${id}`);
        }
      }
    } catch (error) {
      console.warn(`Erro ao carregar pokemon ${id} do localStorage:`, error);
      // Remove item corrompido
      localStorage.removeItem(`pokemon_${id}`);
    }
    return null;
  }
  
  /**
   * Obt√©m estat√≠sticas do cache
   * @returns {Object} - Estat√≠sticas do cache
   */
  static getStats() {
    return {
      memoryCache: this.storage.size,
      localStorageItems: Object.keys(localStorage).filter(key => 
        key.startsWith('pokemon_')
      ).length,
      cacheHitRate: this.calculateHitRate()
    };
  }
  
  /**
   * Calcula taxa de acertos do cache (aproximada)
   */
  static calculateHitRate() {
    // Implementa√ß√£o simples - voc√™ pode melhorar isso
    const total = this.storage.size;
    return total > 0 ? Math.min(total / 100, 1) * 100 : 0;
  }
  
  /**
   * Limpa cache expirado
   */
  static cleanExpired() {
    const now = Date.now();
    
    // Limpa cache da mem√≥ria
    for (const [id, cached] of this.storage.entries()) {
      if (!this.isValid(cached)) {
        this.storage.delete(id);
      }
    }
    
    // Limpa localStorage
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('pokemon_')) {
        try {
          const stored = JSON.parse(localStorage.getItem(key));
          if (!this.isValid(stored)) {
            localStorage.removeItem(key);
          }
        } catch (error) {
          // Remove itens corrompidos
          localStorage.removeItem(key);
        }
      }
    });
    
    console.log('üßπ Cache expirado limpo');
  }
  
  /**
   * Limpa todo o cache
   */
  static clear() {
    this.storage.clear();
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('pokemon_')) {
        localStorage.removeItem(key);
      }
    });
    console.log('üóëÔ∏è Cache completamente limpo');
  }
}